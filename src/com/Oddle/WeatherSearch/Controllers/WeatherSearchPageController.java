/*Author - Adit
 * Date 19/3/2017
 */

package com.Oddle.WeatherSearch.Controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.codehaus.jackson.map.SerializationConfig;
import org.springframework.web.servlet.ModelAndView;
import com.Oddle.WeatherSearch.Service.WeatherSearchPageService;
import com.Oddle.WeatherSearch.VO.Weather;
import com.Oddle.WeatherSearch.VO.CityWeatherData;
import com.Oddle.WeatherSearch.VO.CityDetails;

@Controller
public class WeatherSearchPageController {
	
	private final static Log LOG = LogFactory.getLog(WeatherSearchPageController.class);
	
	@Autowired
	private WeatherSearchPageService weatherSearchPageService;
	
	public WeatherSearchPageService getWeatherSearchPageService() {
		return weatherSearchPageService;
	}

	public void setWeatherSearchPageService(
			WeatherSearchPageService weatherSearchPageService) {
		this.weatherSearchPageService = weatherSearchPageService;
	}
	
	/*The default mapping. When the application loads on the server, the context root triggers this method.
	 * The method returns the ModelAndView object. The model is the list of objects containing the weather data.
	 * The method redirects to the WeatherData jsp page which renders the model into HTML.
	 */
	@RequestMapping("/")
	public ModelAndView getWeatherData()
	{
		ModelAndView weatherModel = null;
		List<CityDetails> weatherData = new CopyOnWriteArrayList<CityDetails>();
		weatherData = weatherSearchPageService.getWeatherDataService();
		weatherModel = new ModelAndView("WeatherData","weatherData",weatherData);
		return weatherModel;
	}
	
	/*Method to receive weather data when the search is performed.
	 * It converts the JSON to VO and triggers the service which in turn calls the DAO containing the hibernate api.*/
	@RequestMapping("/postWeatherData")
	public void writeWeatherDataToDatabase(@RequestBody String weatherDataString)
	{
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(SerializationConfig.Feature.USE_STATIC_TYPING, true);
		try {
			List<Weather> weather = new ArrayList<Weather>();
			CityWeatherData weatherData = mapper.readValue(weatherDataString, CityWeatherData.class);
			CityDetails weatherDetails = new CityDetails();
			weatherDetails.setCityName(weatherData.getName());
			weatherDetails.setCityId(weatherData.getId());
			weatherData.setWeatherDetails(weatherDetails);
			Weather updatedWeather = weatherData.getWeather().get(0);
			updatedWeather.setWeatherData(weatherData);
			weather.add(updatedWeather);
			weatherData.setWeather(weather);
			Collection<CityWeatherData> weatherDataList = new ArrayList<CityWeatherData>();
			weatherDataList.add(weatherData);
			weatherDetails.setWeatherDetails(weatherDataList);
			weatherSearchPageService.writeWeatherDataToDB(weatherDetails);
		} catch (JsonParseException e) {
			LOG.error("Error", e);
		} catch (JsonMappingException e) {
			LOG.error("Error", e);
		} catch (IOException e) {
			LOG.error("Error", e);
		}

	}
	
	/*Method to trigger delete based on ID generated by Hibernate.*/
	@RequestMapping("/deleteDataForId")
	public void deleteDataForId(@RequestBody int idForDelete)
	{	
		weatherSearchPageService.deleteWeatherLogRecord(idForDelete);
	}
	
	/*Method to trigger delete based on City ID sent by the openweathermap api.*/
	@RequestMapping("/deleteDataForCityId")
	public void deleteDataForCityId(@RequestBody int cityIdForDelete)
	{	
		weatherSearchPageService.deleteWeatherLogRecordForCityId(cityIdForDelete);
	}
	

}
